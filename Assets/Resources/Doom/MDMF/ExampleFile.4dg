#Format MDMF
#Theme Basic4D
#Name {exampleFile}
#Segment [Notes]
Note: the terms "segment type" and "segment name" are used interchangeably, and refer to the name/type in brackets in the segment directive. Sector coordinates are listed in the form <x,z,w>.
Any segment with an "invalid" or unrecognized segment type is treated as a naked import string. In this case, the directive `#import ExampleFile::Notes` would copy the text within this [Notes] segment into the importer at the location of the import directive. If nothing imports a segment and the segment is of an unrecognized type it is essentially a comment. To ensure that comments stay as comments, the following segment types will never be recognized and should not be given meaning in forks or future development: [Notes*, Comment*, Text* (excluding TextDef*), Null]. All except [Comment*, Null, End] can still be imported. Attempting to import a [Comment*, Null, End] segment should always return an error even if the segment is defined. A segment can be assigned multiple types at once with the format [SegmentType1, SegmentType2]; this will essentially duplicate the segment under both names. If both types are engine-recognized this will obviously probably cause issues, so maybe don't do that unless you're ready for consequences. Two segments cannot be defined with the same name in the same file; this will throw an error. Note that imports do not import the *segment*, they merely import its contents, so segments can be named identically to imported segments.
The #import directive functions like #include from the C preprocessor; the differences being that quotes on the file are omitted and a specific segment is specified as a scope. A general import directive is as follows: `#import path/to/file::SegmentName`. File paths are relative to the directory containing the importer. Omitting the file path (i.e. `#import ::SegmentName`) takes a segment from the current file. (I don't know *why* you'd do this, but it's there in case you need it.) For ease of use, `#include` is an accepted alias for this directive.
The #define directive has a syntax and behaviour nearly identical to that of the C preprocessor. The [Defines] segment is reserved for definitions and imports only; any other items or directives (excluding segment directives to start a different segment) are invalid. The intended use of this segment is to be able to easily use the same definitions as another existing file.
The #Format directive is required to be at the very top of every file. If importing a 4D Golf track, you must prepend `#Format 4DGTrack` to the file so that the format can be properly determined. (todo: this) The only other currently available format is MDMF (the format this file uses), based on some ideas from UDMF. The #Theme directive is used identically to its usage in 4D Golf. (Currently it doesn't do anything (todo: this))
The #Segment directive divides a file into segments. The only exclusively special segment type is End, which ends the file. Not even another Segment directive will end a Segment End. End cannot be imported and cannot be duplicated with another segment. The End segment omits brackets in syntax. The top of the file before the first Segment directive is to be used for metadata, such as the map format and name. Several other segment types are special and used by the engine, but with no overly special parsing rules:
 - [Defines]: The engine will execute any #import and #define directives. (All directives are executed in all engine-recognized segments unless stated otherwise, but [Defines] will *only* accept #import and #define directives. Note that #import is technically executed everywhere, but it doesn't matter if it's not executed.)
 - [Sectors]: Defines map sectors. (todo: explain this section more)
 - [Lines]: Defines planedefs and associated data. (todo: explain this section more)
 - [Scripts]: Defines scripts. (todo: explain this section more)
 - [TextDefs]: Defines text based on dialog keys. (todo: explain this section more)
#Segment [Defines]
#define HallwayZ [SectorBoundary] { Vertices: [<0,0,0>, <1,0,0>, <0,1,0>, <1,1,0>, <0,0,1>, <1,0,1>, <0,1,1>, <1,1,1>], Triangles: [{: %<0,1,2> :}, {: %<1,3,2> :}, {: %<4,6,5> :}, {: %<4,7,6> :}, {: %<0,4,1>, @1000, #NoWall :}, {: %<1,4,5>, @1000, #NoWall :}, {: %<2,3,6>, #NoWall :}, {: %<3,7,6>, #NoWall :}, {: %<0,2,4> :}, {: %<2,6,4> :}, {: %<1,5,3> :}, {: %<3,5,7> :}], Kernel: <0.5,0.5,0.5> }
#define HallwayInitTest [Sector] { Boundary: HallwayZ, Transform: [SectorTransform] { Position: <-5,-5,-5>, Rotation: $<0,0,0>, Scale: <10,10,10> } CellFloor: -0.5, CellHeight: 4.5, Tags: {: #TagNone :} }
#Segment [Sectors]
HallwayInitTest
#Segment [Lines]
@1000 {: @20, #ActorPasses, #TriggerMultiple :}
#Segment [Scripts]
@20 begin
    ScriptRun 20 1
done
@21 begin
    Delay $1
    AudioPlay Assets/Resources/Music/FartSfx.mp3
done
#Segment [TextDefs]
#textdef [exampleFile] Example File
#Segment End
